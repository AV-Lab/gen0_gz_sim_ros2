#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import math
from nav_msgs.msg import Odometry
from collections import deque
from tf_transformations import euler_from_quaternion
from autoware_auto_control_msgs.msg import AckermannControlCommand

class PIDControllerNode(Node):
    def __init__(self):
        super().__init__('pid_controller_node')

        # Initialize PID parameters for steering and speed control
        self.steering_pid = PIDController(kp=3.0, ki=0.0, kd=0.0)
        self.starting_point= True

        self.path=deque()
        self.path.extend([
        [-67.92873085376533, -41.23248489830452, 0.04800137493875187] ,
        [-66.92988269857098, -41.18450195482619, 0.04800137493874477] ,
        [-65.93103454337663, -41.136519011347865, 0.048001374938752554] ,
        [-64.93218638818229, -41.08853606786953, 0.061984412643381406] ,
        [-63.93400922402826, -41.026585282608366, 0.04800137493875187] ,
        [-62.93516106883391, -40.978602339130035, 0.04800137493875221] ,
        [-61.93631291363956, -40.9306193956517, 0.04800137493874477] ,
        [-60.93746475844521, -40.88263645217338, 0.04800137493875221] ,
        [-59.938616603250864, -40.83465350869505, 0.04800137493875187] ,
        [-58.93976844805651, -40.78667056521672, 0.04800137493874477] ,
        [-57.94092029286216, -40.73868762173839, 0.04800137493875187] ,
        [-56.94207213766781, -40.69070467826006, 0.04800137493875221] ,
        [-55.94322398247346, -40.64272173478173, 0.04800137493874477] ,
        [-54.94437582727911, -40.594738791303406, 0.04800137493875221] ,
        [-53.945527672084765, -40.546755847825075, 0.04800137493874477] ,
        [-52.94667951689041, -40.49877290434675, 0.04800137493874477] ,
        [-51.94783136169606, -40.45078996086843, 0.04800137493875221] ,
        [-50.948983206501715, -40.402807017390096, 0.04800137493874477] ,
        [-49.95013505130736, -40.35482407391177, 0.04800137493875221] ,
        [-48.95128689611302, -40.30684113043344, 0.04800137493874477] ,
        [-47.952438740918666, -40.258858186955116, 0.04800137493875187] ,
        [-46.953590585724314, -40.210875243476785, 0.04798331915915888] ,
        [-45.95474142497562, -40.16291032829691, 0.04645893262658898] ,
        [-44.95580736770022, -40.11646749885276, 0.04552787462244804] ,
        [-43.956821456549214, -40.070954342829026, 0.04680499763573464] ,
        [-42.95790667261141, -40.02416596718433, 0.050290440458561] ,
        [-41.95918599697558, -39.97389747887728, 0.054202612072178226] ,
        [-41.48555, -39.9482, 0.05729969007254213] ,
        [-40.96077384613156, -39.91809753713052, 0.061125870828082324] ,
        [-39.96265658228336, -39.857010650118234, 0.06448703020765457] ,
        [-38.96472650501439, -39.79256774804648, 0.06588296992308673] ,
        [-37.96687417212946, -39.72673098897556, 0.06531382417520279] ,
        [-36.968990141433366, -39.66146253096577, 0.0635958820737533] ,
        [-35.97101043426568, -39.59790942926426, 0.06343604369373944] ,
        [-34.97302182544112, -39.534515922842594, 0.06343604369373279] ,
        [-33.97503321661657, -39.47112241642093, 0.06343604369373944] ,
        [-32.97704460779202, -39.407728909999264, 0.0634360436937399] ,
        [-31.979055998967468, -39.344335403577595, 0.06343604369373966] ,
        [-30.981067390142915, -39.28094189715593, 0.06343604369373966] ,
        [-29.983078781318362, -39.21754839073426, 0.06343604369373256] ,
        [-28.98509017249381, -39.1541548843126, 0.06343604369373966] ,
        [-27.987101563669256, -39.09076137789093, 0.06343604369373966] ,
        [-26.989112954844703, -39.02736787146926, 0.06343604369373966] ,
        [-25.99112434602015, -38.96397436504759, 0.06343604369373256] ,
        [-24.993135737195598, -38.90058085862593, 0.06343604369373966] ,
        [-23.995147128371045, -38.83718735220426, 0.06343604369373966] ,
        [-22.997158519546492, -38.77379384578259, 0.06343604369373966] ,
        [-21.99916991072194, -38.71040033936092, 0.06343604369373966] ,
        [-21.001181301897386, -38.647006832939255, 0.06343604369373966] ,
        [-20.003192693072833, -38.583613326517586, 0.06343604369373233] ,
        [-19.005204084248277, -38.520219820095924, 0.06343604369373966] ,
        [-18.007215475423724, -38.456826313674256, 0.06343604369373966] ,
        [-17.00922686659917, -38.39343280725259, 0.06343604369373256] ,
        [-16.011238257774618, -38.330039300830926, 0.06343604369373979] ,
        [-15.013249648950067, -38.26664579440926, 0.06343604369373966] ,
        [-14.015261040125514, -38.20325228798759, 0.06343604369373966] ,
        [-13.017272431300961, -38.13985878156592, 0.06343604369373256] ,
        [-12.019283822476408, -38.07646527514426, 0.06343604369373966] ,
        [-11.021295213651856, -38.01307176872259, 0.06343604369373966] ,
        [-10.023306604827303, -37.94967826230092, 0.06343604369373256] ,
        [-9.02531799600275, -37.88628475587926, 0.06343604369373966] ,
        [-8.027329387178197, -37.82289124945759, 0.06343604369373829] ,
        [-7.57565, -37.794200000000004, 0.09807398598777141] ,
        [-7.032687126941514, -37.740778077156655, 0.18577337772580266] ,
        [-6.055598489066471, -37.557143628830325, 0.2754364714077967] ,
        [-5.092316456252538, -37.28490096528864, 0.3364228875737302] ,
        [-4.1365932485781105, -36.95066809105163, 0.3803652585021986] ,
        [-3.2136650672135008, -36.581647891096125, 0.40841015080635873] ,
        [-3.1924504707101438, -36.572467437181615, 0.46944023951430536] ,
        [-2.3212433494245994, -36.13053725569495, 0.5175288407650486] ,
        [-2.3040348877485064, -36.120740733361366, 0.5681925863346479] ,
        [-1.4778160457987015, -35.593264838712415, 0.6180933159254818] ,
        [-1.4675422676690886, -35.585959828430404, 0.6625665101136127] ,
        [-0.6890671105185624, -34.978573621921825, 0.7071261165170035] ,
        [-0.671627184699695, -34.96367043993543, 0.7494294857663794] ,
        [0.0436357484763481, -34.29809583683333, 0.7956352931343412] ,
        [0.08221724667460395, -34.25871621262953, 0.8423166831323088] ,
        [0.7113034663737503, -33.553607476076614, 0.891114684524246] ,
        [0.7457126842293493, -33.511028922730056, 0.9321610892984273] ,
        [1.3092475471323681, -32.751982393276805, 0.9806919994051451] ,
        [1.3323079181092896, -32.71754885824643, 1.009071204244534] ,
        [1.8429196857810939, -31.906223795493652, 1.0466202811780594] ,
        [1.864628058275509, -31.86867386769028, 1.0600806898085364] ,
        [2.332227279901205, -31.03412031178672, 1.068985810522356] ,
        [2.3697152965233568, -30.96579327516625, 1.0836133264555519] ,
        [2.8013115597747866, -30.151115035893994, 1.0954683665333778] ,
        [2.852158919022216, -30.052322233651534, 1.1673511981369133] ,
        [3.2008456104228244, -29.23545816837564, 1.2307551702424748] ,
        [3.2409120558843405, -29.12220675581464, 1.334716590471924] ,
        [3.447097659401345, -28.265120049915694, 1.4605386009329706] ,
        [3.4585350133192065, -28.16180784077668, 1.519208369875089] ,
        [3.48025, -27.74125, 1.5771538206114366] ,
        [3.4772296097013564, -27.266165054067603, 1.5771538206114366] ,
        [3.476593700442586, -27.166141253846636, 1.5771538206114375] ,
        [3.470872158710638, -26.266185262863353, 1.5771538206114364] ,
        [3.4702362494518675, -26.166161462642382, 1.5771538206114382] ,
        [3.464514707719919, -25.26620547165909, 1.5771538206114366] ,
        [3.4638787984611485, -25.166181671438125, 1.5771538206114375] ,
        [3.4581572567292005, -24.266225680454838, 1.5771538206114366] ,
        [3.45752134747043, -24.16620188023387, 1.5771538206114375] ,
        [3.451799805738482, -23.266245889250587, 1.5771538206114366] ,
        [3.4511638964797116, -23.16622208902962, 1.5771538206114373] ,
        [3.445442354747764, -22.26626609804633, 1.5771538206114366] ,
        [3.4448064454889935, -22.166242297825363, 1.5771538206114375] ,
        [3.4390849037570455, -21.266286306842076, 1.5771538206114366] ,
        [3.438448994498275, -21.16626250662111, 1.5771538206114375] ,
        [3.432727452766327, -20.266306515637822, 1.5771538206114366] ,
        [3.4320915435075565, -20.166282715416855, 1.5771538206114375] ,
        [3.4263700017756085, -19.26632672443357, 1.5771538206114366] ,
        [3.425734092516838, -19.1663029242126, 1.5771538206114375] ,
        [3.42001255078489, -18.26634693322932, 1.5771538206114366] ,
        [3.4193766415261195, -18.16632313300835, 1.5771538206114375] ,
        [3.4136550997941715, -17.266367142025068, 1.5771538206114366] ,
        [3.413019190535401, -17.1663433418041, 1.5771538206114375] ,
        [3.407297648803453, -16.266387350820814, 1.5771538206114366] ,
        [3.4066617395446825, -16.166363550599847, 1.577153820611438] ,
        [3.4009401978127345, -15.266407559616566, 1.5771538206114366] ,
        [3.400304288553964, -15.166383759395597, 1.5771538206114375] ,
        [3.394582746822016, -14.266427768412314, 1.5771538206114366] ,
        [3.3939468375632456, -14.166403968191345, 1.5771538206114373] ,
        [3.388225295831298, -13.266447977208061, 1.5771538206114366] ,
        [3.3875893865725275, -13.166424176987093, 1.5771538238563994] ,
        [3.3818678448405795, -12.266468645367222, 1.577153791415305] ,
        [3.381231935581809, -12.166444385782839, 1.5760683033751746] ,
        [3.37648730817458, -11.266481463352388, 1.5740536166537533] ,
        [3.373230003078447, -10.266480322116976, 1.572466030923071] ,
        [3.371560309468869, -9.266487551091984, 1.5709882387664373] ,
        [3.37136839563079, -8.266477837355232, 1.5701443213762436] ,
        [3.372020394404223, -7.26648817102814, 1.570067719510407] ,
        [3.3727490119219934, -6.266474302999003, 1.5699415252469548] ,
        [3.3732980190225064, -5.62421181749267, 1.5684360368357688] ,
        [3.374142348424615, -5.266489737232202, 1.5678269334265447] ,
        [3.376049518585205, -4.624215602874756, 1.5678269334265447]])

        self.control_cmd= AckermannControlCommand()

        self.control_publisher = self.create_publisher(
            AckermannControlCommand,
            '/control/command/control_cmd',
            10
        )
        
        self.subscription = self.create_subscription(Odometry, '/localization/kinematic_state',self.path_tracking, 10)

    def path_tracking(self, msg):
        # Current position in (x,y,yaw) format
        vehicle_position= [msg.pose.pose.position.x, msg.pose.pose.position.y, euler_from_quaternion([msg.pose.pose.orientation.x, msg.pose.pose.orientation.y, msg.pose.pose.orientation.z, msg.pose.pose.orientation.w])[2]]

        # Find the next goal based on the closest distance
        target_position = self.find_target_pose(vehicle_position)

        # Calculate steering based on target yaw and current yaw
        steering_command = self.steering_pid.calculate(target_position[2], vehicle_position[2])

        self.control_cmd.lateral.steering_tire_angle=steering_command
        self.control_cmd.longitudinal.speed=3.0

        # Publish control commands
        self.control_publisher.publish(self.control_cmd)
    
    def find_target_pose(self, vehicle_position):
        try:
            deque0 = math.sqrt((self.path[0][0] - vehicle_position[0]) ** 2 + (self.path[0][1] - vehicle_position[1]) ** 2)
            deque1 = math.sqrt((self.path[1][0] - vehicle_position[0]) ** 2 + (self.path[1][1] - vehicle_position[1]) ** 2)
            if deque1 < deque0:
                print("updating goal point")
                self.path.popleft()
            target_pose = self.path[0]  
            return target_pose
        except:
            print("Reached Goal")
            self.control_cmd.longitudinal.speed=0.0
            self.control_cmd.lateral.steering_tire_angle=0.0
            self.control_publisher.publish(self.control_cmd)
            self.destroy()
            rclpy.shutdown()

    def destroy(self):
        super().destroy_node()

class PIDController:
    def __init__(self, kp, ki, kd):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.prev_error = 0
        self.integral = 0

    def calculate(self, target, current):
        error = target - current
        self.integral += error
        derivative = error - self.prev_error

        output = self.kp * error + self.ki * self.integral + self.kd * derivative

        self.prev_error = error
        return min(max(output, -0.6), 0.6)

def main(args=None):
    rclpy.init(args=args)
    node = PIDControllerNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass

    node.destroy()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
